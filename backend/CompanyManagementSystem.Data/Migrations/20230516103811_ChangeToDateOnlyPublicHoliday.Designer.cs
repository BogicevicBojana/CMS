// <auto-generated />
using System;
using CompanyManagementSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CompanyManagementSystem.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230516103811_ChangeToDateOnlyPublicHoliday")]
    partial class ChangeToDateOnlyPublicHoliday
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CompanyManagementSystem.Data.Entities.Benefit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Benefits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6200),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6200),
                            IsDeleted = false,
                            Name = "Private health insurance"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6220),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6220),
                            IsDeleted = false,
                            Name = "Foreign language lessons"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6240),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6240),
                            IsDeleted = false,
                            Name = "Remote work"
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6260),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6260),
                            IsDeleted = false,
                            Name = "Employee learning and advancement"
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6290),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6290),
                            IsDeleted = false,
                            Name = "Paid courses and literature for professional development"
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6310),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6310),
                            IsDeleted = false,
                            Name = "Additional day off for one year of experience (+1 day)"
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6320),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6320),
                            IsDeleted = false,
                            Name = "Additional days off for more than three years of experience (+2 days)"
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6340),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6340),
                            IsDeleted = false,
                            Name = "Paid sports activities"
                        },
                        new
                        {
                            Id = 9,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6350),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6350),
                            IsDeleted = false,
                            Name = "Parents day off (+1 day)"
                        },
                        new
                        {
                            Id = 10,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6370),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6370),
                            IsDeleted = false,
                            Name = "Courses for team-leader positions"
                        });
                });

            modelBuilder.Entity("CompanyManagementSystem.Data.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6520),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6520),
                            IsDeleted = false,
                            Name = "English"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6540),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6540),
                            IsDeleted = false,
                            Name = "German"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6560),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6560),
                            IsDeleted = false,
                            Name = "Russian"
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6570),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6570),
                            IsDeleted = false,
                            Name = "French"
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6590),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6590),
                            IsDeleted = false,
                            Name = "Turkish"
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6600),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6600),
                            IsDeleted = false,
                            Name = "Italian"
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6620),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6620),
                            IsDeleted = false,
                            Name = "Spanish"
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6640),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6640),
                            IsDeleted = false,
                            Name = "Polish"
                        },
                        new
                        {
                            Id = 9,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6650),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6650),
                            IsDeleted = false,
                            Name = "Dutch"
                        },
                        new
                        {
                            Id = 10,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6670),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6670),
                            IsDeleted = false,
                            Name = "Serbian"
                        });
                });

            modelBuilder.Entity("CompanyManagementSystem.Data.Entities.PublicHoliday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("PublicHolidays");
                });

            modelBuilder.Entity("CompanyManagementSystem.Data.Entities.ReligiousHoliday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ReligiousHolidays");
                });

            modelBuilder.Entity("CompanyManagementSystem.Data.Entities.RequestStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RequestStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pending acceptance"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Accepted"
                        });
                });

            modelBuilder.Entity("CompanyManagementSystem.Data.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Employee"
                        });
                });

            modelBuilder.Entity("CompanyManagementSystem.Data.Entities.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6810),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6810),
                            IsDeleted = false,
                            Name = "JavaScript"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6820),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6820),
                            IsDeleted = false,
                            Name = "AngularJS"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6840),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6840),
                            IsDeleted = false,
                            Name = "TypeScript"
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6850),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6850),
                            IsDeleted = false,
                            Name = "Angular"
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6870),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6870),
                            IsDeleted = false,
                            Name = "ReactJS"
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6880),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6880),
                            IsDeleted = false,
                            Name = "CSS"
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6900),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6900),
                            IsDeleted = false,
                            Name = "Ruby (Ruby on Rails)"
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6930),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6930),
                            IsDeleted = false,
                            Name = "Python"
                        },
                        new
                        {
                            Id = 9,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6940),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6940),
                            IsDeleted = false,
                            Name = "Java"
                        },
                        new
                        {
                            Id = 10,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6960),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6960),
                            IsDeleted = false,
                            Name = "SQL"
                        },
                        new
                        {
                            Id = 11,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6980),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6980),
                            IsDeleted = false,
                            Name = "PostgreSQL"
                        },
                        new
                        {
                            Id = 12,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6990),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(6990),
                            IsDeleted = false,
                            Name = "MongoDB"
                        },
                        new
                        {
                            Id = 13,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(7010),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(7010),
                            IsDeleted = false,
                            Name = "GitHub"
                        },
                        new
                        {
                            Id = 14,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(7020),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(7020),
                            IsDeleted = false,
                            Name = "Jira"
                        },
                        new
                        {
                            Id = 15,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(7030),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(7030),
                            IsDeleted = false,
                            Name = "Kotlin"
                        },
                        new
                        {
                            Id = 16,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(7050),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(7050),
                            IsDeleted = false,
                            Name = "Object C"
                        },
                        new
                        {
                            Id = 17,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(7060),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(7060),
                            IsDeleted = false,
                            Name = "Swift"
                        },
                        new
                        {
                            Id = 18,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(7080),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(7080),
                            IsDeleted = false,
                            Name = "Xmpp"
                        },
                        new
                        {
                            Id = 19,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(7090),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(7090),
                            IsDeleted = false,
                            Name = "Flutter"
                        },
                        new
                        {
                            Id = 20,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(7110),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(7110),
                            IsDeleted = false,
                            Name = "C#"
                        },
                        new
                        {
                            Id = 21,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(7120),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(7120),
                            IsDeleted = false,
                            Name = "C"
                        },
                        new
                        {
                            Id = 22,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(7140),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(7140),
                            IsDeleted = false,
                            Name = "C++"
                        },
                        new
                        {
                            Id = 23,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(7150),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(7150),
                            IsDeleted = false,
                            Name = "Haskell"
                        },
                        new
                        {
                            Id = 24,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(7170),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(7170),
                            IsDeleted = false,
                            Name = "Hardware Design / Embedded"
                        },
                        new
                        {
                            Id = 25,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(7180),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(7180),
                            IsDeleted = false,
                            Name = "PHP"
                        },
                        new
                        {
                            Id = 26,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(7200),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(7200),
                            IsDeleted = false,
                            Name = "Dart"
                        },
                        new
                        {
                            Id = 27,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(7210),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(7210),
                            IsDeleted = false,
                            Name = "Selenium"
                        },
                        new
                        {
                            Id = 28,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(7220),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(7230),
                            IsDeleted = false,
                            Name = "Appium"
                        },
                        new
                        {
                            Id = 29,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(7240),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(7240),
                            IsDeleted = false,
                            Name = "TestNG"
                        },
                        new
                        {
                            Id = 30,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(7260),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(7260),
                            IsDeleted = false,
                            Name = "xUnit"
                        });
                });

            modelBuilder.Entity("CompanyManagementSystem.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("EmploymentDate")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FreeDaysLastYear")
                        .HasColumnType("integer");

                    b.Property<int>("FreeDaysThisYear")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int>("WorkingPositionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("StatusId");

                    b.HasIndex("WorkingPositionId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CompanyManagementSystem.Data.Entities.UserBenefit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BenefitId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BenefitId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBenefits");
                });

            modelBuilder.Entity("CompanyManagementSystem.Data.Entities.UserLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLanguages");
                });

            modelBuilder.Entity("CompanyManagementSystem.Data.Entities.UserReligiousHoliday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ReligiousHolidayId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReligiousHolidayId");

                    b.HasIndex("UserId");

                    b.ToTable("UserReligiousHolidays");
                });

            modelBuilder.Entity("CompanyManagementSystem.Data.Entities.UserSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SkillId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("CompanyManagementSystem.Data.Entities.UserStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Inactive"
                        });
                });

            modelBuilder.Entity("CompanyManagementSystem.Data.Entities.Vacation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Vacations");
                });

            modelBuilder.Entity("CompanyManagementSystem.Data.Entities.VacationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ProcessedById")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<int>("RequestStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("RequestedById")
                        .HasColumnType("integer");

                    b.Property<int>("VacationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProcessedById");

                    b.HasIndex("RequestStatusId");

                    b.HasIndex("RequestedById");

                    b.HasIndex("VacationId");

                    b.ToTable("VacationRequests");
                });

            modelBuilder.Entity("CompanyManagementSystem.Data.Entities.WorkingPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WorkingPositions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(7790),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(7790),
                            IsDeleted = false,
                            Name = "Software developer"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(7810),
                            DateModified = new DateTime(2023, 5, 16, 10, 38, 11, 78, DateTimeKind.Utc).AddTicks(7810),
                            IsDeleted = false,
                            Name = "Designer"
                        });
                });

            modelBuilder.Entity("CompanyManagementSystem.Data.Entities.User", b =>
                {
                    b.HasOne("CompanyManagementSystem.Data.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyManagementSystem.Data.Entities.UserStatus", "UserStatus")
                        .WithMany("Users")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyManagementSystem.Data.Entities.WorkingPosition", "WorkingPosition")
                        .WithMany("Users")
                        .HasForeignKey("WorkingPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UserStatus");

                    b.Navigation("WorkingPosition");
                });

            modelBuilder.Entity("CompanyManagementSystem.Data.Entities.UserBenefit", b =>
                {
                    b.HasOne("CompanyManagementSystem.Data.Entities.Benefit", "Benefit")
                        .WithMany("UserBenefits")
                        .HasForeignKey("BenefitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyManagementSystem.Data.Entities.User", "User")
                        .WithMany("UserBenefits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Benefit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CompanyManagementSystem.Data.Entities.UserLanguage", b =>
                {
                    b.HasOne("CompanyManagementSystem.Data.Entities.Language", "Language")
                        .WithMany("UserLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyManagementSystem.Data.Entities.User", "User")
                        .WithMany("UserLanguages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CompanyManagementSystem.Data.Entities.UserReligiousHoliday", b =>
                {
                    b.HasOne("CompanyManagementSystem.Data.Entities.ReligiousHoliday", "ReligiousHoliday")
                        .WithMany("UserReligiousHolidays")
                        .HasForeignKey("ReligiousHolidayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyManagementSystem.Data.Entities.User", "User")
                        .WithMany("UserReligiousHolidays")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReligiousHoliday");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CompanyManagementSystem.Data.Entities.UserSkill", b =>
                {
                    b.HasOne("CompanyManagementSystem.Data.Entities.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyManagementSystem.Data.Entities.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CompanyManagementSystem.Data.Entities.VacationRequest", b =>
                {
                    b.HasOne("CompanyManagementSystem.Data.Entities.User", "ProcessedBy")
                        .WithMany("ProcessedVacationRequests")
                        .HasForeignKey("ProcessedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyManagementSystem.Data.Entities.RequestStatus", "RequestStatus")
                        .WithMany("VacationRequests")
                        .HasForeignKey("RequestStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyManagementSystem.Data.Entities.User", "RequestedBy")
                        .WithMany("RequestedVacationRequests")
                        .HasForeignKey("RequestedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyManagementSystem.Data.Entities.Vacation", "Vacation")
                        .WithMany("VacationRequests")
                        .HasForeignKey("VacationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProcessedBy");

                    b.Navigation("RequestStatus");

                    b.Navigation("RequestedBy");

                    b.Navigation("Vacation");
                });

            modelBuilder.Entity("CompanyManagementSystem.Data.Entities.Benefit", b =>
                {
                    b.Navigation("UserBenefits");
                });

            modelBuilder.Entity("CompanyManagementSystem.Data.Entities.Language", b =>
                {
                    b.Navigation("UserLanguages");
                });

            modelBuilder.Entity("CompanyManagementSystem.Data.Entities.ReligiousHoliday", b =>
                {
                    b.Navigation("UserReligiousHolidays");
                });

            modelBuilder.Entity("CompanyManagementSystem.Data.Entities.RequestStatus", b =>
                {
                    b.Navigation("VacationRequests");
                });

            modelBuilder.Entity("CompanyManagementSystem.Data.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CompanyManagementSystem.Data.Entities.Skill", b =>
                {
                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("CompanyManagementSystem.Data.Entities.User", b =>
                {
                    b.Navigation("ProcessedVacationRequests");

                    b.Navigation("RequestedVacationRequests");

                    b.Navigation("UserBenefits");

                    b.Navigation("UserLanguages");

                    b.Navigation("UserReligiousHolidays");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("CompanyManagementSystem.Data.Entities.UserStatus", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CompanyManagementSystem.Data.Entities.Vacation", b =>
                {
                    b.Navigation("VacationRequests");
                });

            modelBuilder.Entity("CompanyManagementSystem.Data.Entities.WorkingPosition", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
